const mongoose = require('mongoose')
const Schema = mongoose.Schema
const orderSchema = new Schema({
    'userId': mongoose.Schema.Types.ObjectId, ref: 'user',
    'productList': [{
        'category': mongoose.Schema.Types.ObjectId, ref: 'Category',
        'categoryId': mongoose.Schema.Types.ObjectId, ref: 'SubCategory',
        'productId': mongoose.Schema.Types.ObjectId, ref: 'product',
        'unit': { type: String },
        'imageUrl': { type: String },
        uniqueCode: { type: String },
        'productDescription': { type: String },
        durationDateTo: { type: String, required: false },
        durationTimeTo: { type: String, required: false },
        durationDateFrom: { type: String, required: false },
        durationTimeFrom: { type: String, required: false },
        quantity: { type: Number },
        minQuatity: { type: Number },
        'price': { type: Number },
        'status': { type: String, default: "Pending" },
        totalValue: { type: Number }
                // isInvoice: { Boolean: false }
    }],
    'accountNumber': { type: String, default: "" },
    farmerBankName: { type: String, default: "" },
    bankHolderName: { type: String, default: "" },
    ifscCode: { type: String, default: "" },
    cartId: { type: String },
    deliveryCharge: { type: Number, default: 0 },
    orderTotal: { type: Number },
    orderMRP: { type: Number },
    OrderInformation: { type: String },
    orderStatus: { type: String, default: "created" },
    orderStatusCode: { type: Number, default: 1000 },
    orderNumber: { type: String },
    email: { type: String },
    paymentSuccessStatus: { type: String },
    createDate: { type: String },
    paymentMethod: { type: String },
    cancelationReason: { type: String, default: "" },
    cancelationRemarks: { type: String, default: "" },
    cancelationDate: { type: String, default: "" },
    orderDate: { type: String },
    pickUpAddress: { type: String },
    shippingAddress: {
        title: { type: String },
        street: { type: String },
        interior: { type: String },
        city: { type: String },
        state: { type: String },
        name: { type: String },
        address: { type: String },
        locality: { type: String },
        country: { type: String },
        mobile: { type: String },
        formattedAddress: { type: String }
    },
    transactionInfo: {
        transactionDate: { type: String },
        transactionId: { type: String },
        amount: { type: String },
        discription: { type: String },
        userName: { type: String },
        accountNumber: { type: String },
        ifscCode: { type: String },
        farmerId: { type: String },
        orderIdsInfo: [{
            orderId: String,
            amount: Number
        }],
        amount: { type: String },
    },
    prodDecline: { type: Boolean, default: false },
    buyerName: { type: String },
    userPhoto: { type: String, default: "commom.png" },
    farmerName: { type: String },
    farmerAddress: { type: String, default: "" },
    farmerImage: { type: String },
    farmerId: { type: String },
    buyerId: { type: String },
    isFarmerPay: { type: Boolean, default: false },
    transactionDate: { type: String, default: "" },
    transactionId: { type: String, default: "" },
    Date: { type: String },
    inprogerssDate: { type: String },
    deliveryDate: { type: String },
    log: [{
        orderActivity: { type: String },
        employeeId: { type: String },
        employeeName: { type: String },
        orderId: { type: String },
        comment: { type: String },
        date: { type: Date }
    }],
    isInvoice: { type: Boolean, default: false },
    isCancel: { type: Boolean, default: false },
    isRefund: { type: Boolean, default: false },
    isActive: { type: Boolean, default: true },
    buyerPhoto: { type: String },
    comment: { type: String },
    userDeviceId: [],
    pendingPaymentForFarmer: { type: Number },
    refunfInformation: [],
    paymentId: { type: String, default: "" },
    pickup: { type: Boolean, default: false }
}, {
    timestamps: { createdAt: 'createdAt', updatedAt: 'lastUpdate' }
})


module.exports = mongoose.model('order', orderSchema)